require 'rails_helper'
require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe WikisController, type: :controller do
  # This should return the minimal set of attributes required to create a valid
  # Wiki. As you add validations to Wiki, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    {
      title: Faker::Hipster.sentence(3, true, 2),
      body: Faker::Lorem.paragraph(2, true, 4),
      private: false
    }
  end

  let(:invalid_attributes) do
    {
      title: '',
      body: ''
    }
  end

  let(:user) { create(:user) }
  let!(:wiki) { create(:wiki, user: user) }

  describe 'GET #index' do
    it 'assigns all wikis as @wikis' do
      get :index
      expect(assigns(:wikis)).to eq([wiki])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested wiki as @wiki' do
      get :show, id: wiki.to_param
      expect(assigns(:wiki)).to eq(wiki)
    end
  end

  describe 'GET #new' do
    login_user
    it 'assigns a new wiki as @wiki' do
      get :new, {}
      expect(assigns(:wiki)).to be_a_new(Wiki)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested wiki as @wiki' do
      get :edit, id: wiki.to_param
      expect(assigns(:wiki)).to eq(wiki)
    end
  end

  describe 'POST #create' do
    login_user
    context 'with valid params' do
      it 'creates a new Wiki' do
        expect do
          post :create, wiki: valid_attributes
        end.to change(Wiki, :count).by(1)
      end

      it 'assigns a newly created wiki as @wiki' do
        post :create, wiki: valid_attributes
        expect(assigns(:wiki)).to be_a(Wiki)
        expect(assigns(:wiki)).to be_persisted
      end

      it 'redirects to the created wiki' do
        post :create, wiki: valid_attributes
        expect(response).to redirect_to(Wiki.last)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved wiki as @wiki' do
        post :create, wiki: invalid_attributes
        expect(assigns(:wiki)).to be_a_new(Wiki)
      end

      it "re-renders the 'new' template" do
        post :create, wiki: invalid_attributes
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      login_user
      let(:new_attributes) do
        {
          title: Faker::Hipster.sentence(3, true, 2),
          body: Faker::Lorem.paragraph(2, true, 4),
          private: false
        }
      end

      it 'updates the requested wiki' do
        put :update, id: wiki.to_param, wiki: new_attributes
        wiki.reload
        expect(response).to have_http_status(:redirect)
        expect(wiki.title).to eq(new_attributes[:title])
        expect(wiki.body).to eq(new_attributes[:body])
        expect(wiki.private).to eq(new_attributes[:private])
      end

      it 'assigns the requested wiki as @wiki' do
        put :update, id: wiki.to_param, wiki: valid_attributes
        expect(assigns(:wiki)).to eq(wiki)
      end

      it 'redirects to the wiki' do
        put :update, id: wiki.to_param, wiki: valid_attributes
        expect(response).to redirect_to(wiki)
      end
    end

    context 'with invalid params' do
      login_user
      it 'assigns the wiki as @wiki' do
        put :update, id: wiki.to_param, wiki: invalid_attributes
        expect(assigns(:wiki)).to eq(wiki)
      end

      it "re-renders the 'edit' template" do
        put :update, id: wiki.to_param, wiki: invalid_attributes
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    login_admin
    it 'destroys the requested wiki' do
      expect do
        delete :destroy, id: wiki.to_param
      end.to change(Wiki, :count).by(-1)
    end

    it 'redirects to the wikis list' do
      delete :destroy, id: wiki.to_param
      expect(response).to redirect_to(wikis_url)
    end
  end
end

# RSpec.describe WikisController, type: :controller do
#   let(:my_user) { create(:user) }
#   let(:other_user) { create(:user) }
#   let(:my_wiki) { create(:wiki, user: my_user) }
#
#   context 'guest' do
#     describe 'GET show' do
#       it 'returns http success' do
#         get :show, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #show view' do
#         get :show, id: my_wiki.id
#         expect(response).to render_template :show
#       end
#
#       it 'assigns my_wiki to @wiki' do
#         get :show, id: my_wiki.id
#         expect(assigns(:wiki)).to eq(my_wiki)
#       end
#     end
#
#     describe 'GET new' do
#       it 'returns http redirect' do
#         get :new
#         expect(response).to redirect_to(new_user_session_path)
#       end
#     end
#
#     describe 'POST create' do
#       it 'returns http redirect' do
#         post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4) }
#         expect(response).to redirect_to(new_user_session_path)
#       end
#     end
#
#     describe 'GET edit' do
#       it 'returns http success' do
#         get :edit, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #edit view' do
#         get :edit, id: my_wiki.id
#         expect(response).to render_template :edit
#       end
#
#       it 'assigns wiki to be updated to @wiki' do
#         get :edit, id: my_wiki.id
#         wiki_instance = assigns(:wiki)
#
#         expect(wiki_instance.id).to eq my_wiki.id
#         expect(wiki_instance.title).to eq my_wiki.title
#         expect(wiki_instance.body).to eq my_wiki.body
#       end
#     end
#
#     describe 'PUT update' do
#       it 'updates wiki with expected attributes' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#
#         updated_wiki = assigns(:wiki)
#         expect(updated_wiki.id).to eq my_wiki.id
#         expect(updated_wiki.title).to eq new_title
#         expect(updated_wiki.body).to eq new_body
#       end
#
#       it 'redirects to the updated wiki' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#         expect(response).to redirect_to my_wiki
#       end
#     end
#
#     describe 'DELETE destroy' do
#       it 'returns http redirect' do
#         delete :destroy, id: my_wiki.id
#         expect(response).to redirect_to(new_user_session_path)
#       end
#     end
#   end
#
#   context "standard user doing CRUD on a post they don't own" do
#     before do
#       set_session[other_user]
#     end
#
#     describe 'GET show' do
#       it 'returns http success' do
#         get :show, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #show view' do
#         get :show, id: my_wiki.id
#         expect(response).to render_template :show
#       end
#
#       it 'assigns my_wiki to @wiki' do
#         get :show, id: my_wiki.id
#         expect(assigns(:wiki)).to eq(my_wiki)
#       end
#     end
#
#     describe 'GET new' do
#       it 'returns http redirect' do
#         get :new
#         expect(response).to redirect_to(new_user_session_path)
#       end
#     end
#
#     describe 'POST create' do
#       it 'increases the number of Wiki by 1' do
#         expect { post :create, user_id: my_user.id, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4), user_id: my_user.id } }.to change(Wiki, :count).by(1)
#       end
#
#       it 'assigns the new wiki to @wiki' do
#         post :create, user_id: my_user.id, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4), user_id: my_user.id }
#         expect(assigns(:wiki)).to eq Wiki.last
#       end
#
#       it 'redirects to the new wiki' do
#         post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4) }
#         expect(response).to redirect_to Wiki.last
#       end
#     end
#
#     describe 'GET edit' do
#       it 'returns http redirect' do
#         get :edit, id: my_wiki.id
#         expect(response).to redirect_to([my_wiki])
#       end
#     end
#
#     describe 'PUT update' do
#       it 'returns http redirect' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#         expect(response).to redirect_to([my_wiki])
#       end
#     end
#
#     describe 'DELETE destroy' do
#       it 'returns http redirect' do
#         delete :destroy, id: my_wiki.id
#         expect(response).to redirect_to([my_wiki])
#       end
#     end
#   end
#
#   context 'standard user doing CRUD on a wiki they own' do
#     before do
#       set_session[my_user]
#     end
#
#     describe 'GET show' do
#       it 'returns http success' do
#         get :show, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #show view' do
#         get :show, id: my_wiki.id
#         expect(response).to render_template :show
#       end
#
#       it 'assigns my_wiki to @wiki' do
#         get :show, id: my_wiki.id
#         expect(assigns(:wiki)).to eq(my_wiki)
#       end
#     end
#
#     describe 'GET new' do
#       it 'returns http success' do
#         get :new
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #new view' do
#         get :new
#         expect(response).to render_template :new
#       end
#
#       it 'instantiates @wiki' do
#         get :new
#         expect(assigns(:wiki)).not_to be_nil
#       end
#     end
#
#     describe 'POST create' do
#       it 'increases the number of Wiki by 1' do
#         expect { post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4) } }.to change(Wiki, :count).by(1)
#       end
#
#       it 'assigns the new wiki to @wiki' do
#         post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4) }
#         expect(assigns(:wiki)).to eq Wiki.last
#       end
#
#       it 'redirects to the new wiki' do
#         post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4) }
#         expect(response).to redirect_to Wiki.last
#       end
#     end
#
#     describe 'GET edit' do
#       it 'returns http success' do
#         get :edit, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #edit view' do
#         get :edit, id: my_wiki.id
#         expect(response).to render_template :edit
#       end
#
#       it 'assigns wiki to be updated to @wiki' do
#         get :edit, id: my_wiki.id
#         wiki_instance = assigns(:wiki)
#
#         expect(wiki_instance.id).to eq my_wiki.id
#         expect(wiki_instance.title).to eq my_wiki.title
#         expect(wiki_instance.body).to eq my_wiki.body
#       end
#     end
#
#     describe 'PUT update' do
#       it 'updates wiki with expected attributes' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#
#         updated_wiki = assigns(:wiki)
#         expect(updated_wiki.id).to eq my_wiki.id
#         expect(updated_wiki.title).to eq new_title
#         expect(updated_wiki.body).to eq new_body
#       end
#
#       it 'redirects to the updated wiki' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#         expect(response).to redirect_to [my_wiki]
#       end
#     end
#
#     describe 'DELETE destroy' do
#       it 'deletes the wiki' do
#         delete :destroy, id: my_wiki.id
#         count = Wiki.where(id: my_wiki.id).size
#         expect(count).to eq 0
#       end
#
#       it 'redirects to wikis index' do
#         delete :destroy, id: my_wiki.id
#         expect(response).to redirect_to my_wiki
#       end
#     end
#   end
#
#   context "admin user doing CRUD on a wiki they don't own" do
#     before do
#       other_user.admin!
#       set_session[other_user]
#     end
#
#     describe 'GET show' do
#       it 'returns http success' do
#         get :show, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #show view' do
#         get :show, id: my_wiki.id
#         expect(response).to render_template :show
#       end
#
#       it 'assigns my_wiki to @wiki' do
#         get :show, id: my_wiki.id
#         expect(assigns(:wiki)).to eq(my_wiki)
#       end
#     end
#
#     describe 'GET new' do
#       it 'returns http success' do
#         get :new
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #new view' do
#         get :new
#         expect(response).to render_template :new
#       end
#
#       it 'instantiates @wiki' do
#         get :new
#         expect(assigns(:wiki)).not_to be_nil
#       end
#     end
#
#     describe 'POST create' do
#       it 'increases the number of Wiki by 1' do
#         expect { post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4), private: false } }.to change(Wiki, :count).by(1)
#       end
#
#       it 'assigns the new wiki to @wiki' do
#         post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4), private: false }
#         expect(assigns(:wiki)).to eq Wiki.last
#       end
#
#       it 'redirects to the new wiki' do
#         post :create, wiki: { title: Faker::Hipster.sentence(3, true, 2), body: Faker::Lorem.paragraph(2, true, 4), private: false }
#         expect(response).to redirect_to Wiki.last
#       end
#     end
#
#     describe 'GET edit' do
#       it 'returns http success' do
#         get :edit, id: my_wiki.id
#         expect(response).to have_http_status(:success)
#       end
#
#       it 'renders the #edit view' do
#         get :edit, id: my_wiki.id
#         expect(response).to render_template :edit
#       end
#
#       it 'assigns wiki to be updated to @wiki' do
#         get :edit, id: my_wiki.id
#         wiki_instance = assigns(:wiki)
#
#         expect(wiki_instance.id).to eq my_wiki.id
#         expect(wiki_instance.title).to eq my_wiki.title
#         expect(wiki_instance.body).to eq my_wiki.body
#       end
#     end
#
#     describe 'PUT update' do
#       it 'updates wiki with expected attributes' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#
#         updated_wiki = assigns(:wiki)
#         expect(updated_wiki.id).to eq my_wiki.id
#         expect(updated_wiki.title).to eq new_title
#         expect(updated_wiki.body).to eq new_body
#       end
#
#       it 'redirects to the updated wiki' do
#         new_title = Faker::Hipster.sentence(3, true, 2)
#         new_body = Faker::Lorem.paragraph(2, true, 4)
#
#         put :update, id: my_wiki.id, wiki: { title: new_title, body: new_body }
#         expect(response).to redirect_to my_wiki
#       end
#     end
#
#     describe 'DELETE destroy' do
#       it 'deletes the wiki' do
#         delete :destroy, id: my_wiki.id
#         count = Wiki.where(id: my_wiki.id).size
#         expect(count).to eq 0
#       end
#
#       it 'redirects to wikis index' do
#         delete :destroy, id: my_wiki.id
#         expect(response).to redirect_to my_wiki
#       end
#     end
#   end
# end
